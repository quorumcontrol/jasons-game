syntax = "proto3";

package jasonsgame;

message UserInput {
    string message = 1;
    Session session = 2;
}

message MessageToUser {
    string message = 1;
    Location location = 2;
    uint64 sequence = 3;
    bool heartbeat = 4;
}

message CommandUpdate {
    string command = 1;
    repeated string args = 2;
    Location location = 3;
    uint64 sequence = 4;
    bool heartbeat = 5;
}

message Stats {
    string message = 1;
}

message UserInterfaceMessage {
  oneof ui_message {
    MessageToUser user_message = 1;
    CommandUpdate command_update = 2;
  }
}

message Exit {};

message Location {
    string did = 1;
    string tip = 2;
    int64 x = 3;
    int64 y = 4;
    string description = 5;
    Portal portal = 6;
    map<string, string> inventory = 7;
}

message Player {
    string name = 1;
}

message Portal {
    string to = 1; // A did
}

message CommandReceived {
    uint64 sequence = 1;
    bool error = 2;
    string error_message = 3;
}

message Session {
    string uuid = 1;
}

message ChatMessage {
    string from = 1;
    string message = 2;
}

message ShoutMessage {
    string from = 1;
    string message = 2;
}

message OpenPortalMessage {
    string from = 1;
    string to = 2;
    string to_land_id = 3;
    int64 location_x = 4;
    int64 location_y = 5;
}

message OpenPortalResponseMessage {
    string from = 1;
    string to = 2;
    bool accepted = 3;
    string opener = 4;
    string land_id = 5;
    int64 location_x = 6;
    int64 location_y = 7;
}

message TransferredObjectMessage {
    string from = 1;
    string to = 2;
    string object = 3;
    repeated int64 loc = 4;
}

message RequestTransferObjectMessage {
    string from = 1;
    string to = 2;
    string object = 3;
}

service GameService {
    rpc SendCommand(UserInput) returns (CommandReceived) {}
    rpc ReceiveUIMessages(Session) returns (stream UserInterfaceMessage) {}
    rpc ReceiveStatMessages(Session) returns (stream Stats) {}
}
