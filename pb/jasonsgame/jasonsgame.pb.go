// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: jasonsgame.proto

package jasonsgame

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserInput struct {
	Message string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Session *Session `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
}

func (m *UserInput) Reset()         { *m = UserInput{} }
func (m *UserInput) String() string { return proto.CompactTextString(m) }
func (*UserInput) ProtoMessage()    {}
func (*UserInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{0}
}
func (m *UserInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInput.Merge(m, src)
}
func (m *UserInput) XXX_Size() int {
	return m.Size()
}
func (m *UserInput) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInput.DiscardUnknown(m)
}

var xxx_messageInfo_UserInput proto.InternalMessageInfo

func (m *UserInput) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *UserInput) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type MessageToUser struct {
	Message   string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Location  *Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Sequence  uint64    `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Heartbeat bool      `protobuf:"varint,4,opt,name=heartbeat,proto3" json:"heartbeat,omitempty"`
}

func (m *MessageToUser) Reset()         { *m = MessageToUser{} }
func (m *MessageToUser) String() string { return proto.CompactTextString(m) }
func (*MessageToUser) ProtoMessage()    {}
func (*MessageToUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{1}
}
func (m *MessageToUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageToUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageToUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageToUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageToUser.Merge(m, src)
}
func (m *MessageToUser) XXX_Size() int {
	return m.Size()
}
func (m *MessageToUser) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageToUser.DiscardUnknown(m)
}

var xxx_messageInfo_MessageToUser proto.InternalMessageInfo

func (m *MessageToUser) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MessageToUser) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *MessageToUser) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *MessageToUser) GetHeartbeat() bool {
	if m != nil {
		return m.Heartbeat
	}
	return false
}

type Stats struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{2}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Exit struct {
}

func (m *Exit) Reset()         { *m = Exit{} }
func (m *Exit) String() string { return proto.CompactTextString(m) }
func (*Exit) ProtoMessage()    {}
func (*Exit) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{3}
}
func (m *Exit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Exit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exit.Merge(m, src)
}
func (m *Exit) XXX_Size() int {
	return m.Size()
}
func (m *Exit) XXX_DiscardUnknown() {
	xxx_messageInfo_Exit.DiscardUnknown(m)
}

var xxx_messageInfo_Exit proto.InternalMessageInfo

type Location struct {
	Did         string            `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	Tip         string            `protobuf:"bytes,2,opt,name=tip,proto3" json:"tip,omitempty"`
	X           int64             `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y           int64             `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
	Description string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Portal      *Portal           `protobuf:"bytes,6,opt,name=portal,proto3" json:"portal,omitempty"`
	Inventory   map[string]string `protobuf:"bytes,7,rep,name=inventory,proto3" json:"inventory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Location) Reset()         { *m = Location{} }
func (m *Location) String() string { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()    {}
func (*Location) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{4}
}
func (m *Location) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Location) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Location.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Location) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Location.Merge(m, src)
}
func (m *Location) XXX_Size() int {
	return m.Size()
}
func (m *Location) XXX_DiscardUnknown() {
	xxx_messageInfo_Location.DiscardUnknown(m)
}

var xxx_messageInfo_Location proto.InternalMessageInfo

func (m *Location) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *Location) GetTip() string {
	if m != nil {
		return m.Tip
	}
	return ""
}

func (m *Location) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Location) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Location) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Location) GetPortal() *Portal {
	if m != nil {
		return m.Portal
	}
	return nil
}

func (m *Location) GetInventory() map[string]string {
	if m != nil {
		return m.Inventory
	}
	return nil
}

type Player struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{5}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Portal struct {
	To string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *Portal) Reset()         { *m = Portal{} }
func (m *Portal) String() string { return proto.CompactTextString(m) }
func (*Portal) ProtoMessage()    {}
func (*Portal) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{6}
}
func (m *Portal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Portal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Portal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Portal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Portal.Merge(m, src)
}
func (m *Portal) XXX_Size() int {
	return m.Size()
}
func (m *Portal) XXX_DiscardUnknown() {
	xxx_messageInfo_Portal.DiscardUnknown(m)
}

var xxx_messageInfo_Portal proto.InternalMessageInfo

func (m *Portal) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type CommandReceived struct {
	Sequence     uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Error        bool   `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	ErrorMessage string `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (m *CommandReceived) Reset()         { *m = CommandReceived{} }
func (m *CommandReceived) String() string { return proto.CompactTextString(m) }
func (*CommandReceived) ProtoMessage()    {}
func (*CommandReceived) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{7}
}
func (m *CommandReceived) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommandReceived) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommandReceived.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommandReceived) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandReceived.Merge(m, src)
}
func (m *CommandReceived) XXX_Size() int {
	return m.Size()
}
func (m *CommandReceived) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandReceived.DiscardUnknown(m)
}

var xxx_messageInfo_CommandReceived proto.InternalMessageInfo

func (m *CommandReceived) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *CommandReceived) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *CommandReceived) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type Session struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_724d7a67f452c51a, []int{8}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Session.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

func (m *Session) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*UserInput)(nil), "jasonsgame.UserInput")
	proto.RegisterType((*MessageToUser)(nil), "jasonsgame.MessageToUser")
	proto.RegisterType((*Stats)(nil), "jasonsgame.Stats")
	proto.RegisterType((*Exit)(nil), "jasonsgame.Exit")
	proto.RegisterType((*Location)(nil), "jasonsgame.Location")
	proto.RegisterMapType((map[string]string)(nil), "jasonsgame.Location.InventoryEntry")
	proto.RegisterType((*Player)(nil), "jasonsgame.Player")
	proto.RegisterType((*Portal)(nil), "jasonsgame.Portal")
	proto.RegisterType((*CommandReceived)(nil), "jasonsgame.CommandReceived")
	proto.RegisterType((*Session)(nil), "jasonsgame.Session")
}

func init() { proto.RegisterFile("jasonsgame.proto", fileDescriptor_724d7a67f452c51a) }

var fileDescriptor_724d7a67f452c51a = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0xc6, 0x89, 0x93, 0x4c, 0xda, 0x52, 0xb6, 0x45, 0x32, 0xa1, 0x58, 0xc6, 0xbd, 0x44,
	0x48, 0x54, 0x55, 0xb8, 0x20, 0xc4, 0xa5, 0x54, 0x15, 0x8a, 0x04, 0x52, 0xb5, 0x29, 0x67, 0xb4,
	0x8d, 0x47, 0xad, 0x69, 0xec, 0x0d, 0xbb, 0x9b, 0x28, 0x7e, 0x0b, 0x2e, 0x1c, 0x78, 0x23, 0x8e,
	0x3d, 0x72, 0xac, 0x92, 0x17, 0x41, 0xbb, 0xb1, 0x13, 0xa7, 0x2a, 0xbd, 0xcd, 0x7c, 0x33, 0xf3,
	0xf9, 0x9b, 0x9f, 0x35, 0xec, 0x7e, 0xe7, 0x4a, 0xa4, 0xea, 0x8a, 0x27, 0x78, 0x34, 0x96, 0x42,
	0x0b, 0x0a, 0x6b, 0x24, 0xbc, 0x80, 0xd6, 0x57, 0x85, 0xb2, 0x9f, 0x8e, 0x27, 0x9a, 0x7a, 0xd0,
	0x48, 0x50, 0x29, 0x7e, 0x85, 0x1e, 0x09, 0x48, 0xb7, 0xc5, 0x0a, 0x97, 0xbe, 0x81, 0x86, 0x42,
	0xa5, 0x62, 0x91, 0x7a, 0xd5, 0x80, 0x74, 0xdb, 0xbd, 0xbd, 0xa3, 0x12, 0xed, 0x60, 0x19, 0x62,
	0x45, 0x4e, 0xf8, 0x8b, 0xc0, 0xf6, 0x97, 0x65, 0xe9, 0x85, 0x30, 0xfc, 0x8f, 0x50, 0x1f, 0x43,
	0x73, 0x24, 0x86, 0x5c, 0xaf, 0xb9, 0xf7, 0xcb, 0xdc, 0x9f, 0xf3, 0x18, 0x5b, 0x65, 0xd1, 0x0e,
	0x34, 0x15, 0xfe, 0x98, 0x60, 0x3a, 0x44, 0xcf, 0x09, 0x48, 0xb7, 0xc6, 0x56, 0x3e, 0x3d, 0x80,
	0xd6, 0x35, 0x72, 0xa9, 0x2f, 0x91, 0x6b, 0xaf, 0x16, 0x90, 0x6e, 0x93, 0xad, 0x81, 0xf0, 0x15,
	0xd4, 0x07, 0x9a, 0x6b, 0xf5, 0x7f, 0x39, 0xa1, 0x0b, 0xb5, 0xb3, 0x59, 0xac, 0xc3, 0xdf, 0x55,
	0x68, 0x16, 0xdf, 0xa6, 0xbb, 0xe0, 0x44, 0x71, 0x94, 0xa7, 0x1a, 0xd3, 0x20, 0x3a, 0x1e, 0x5b,
	0xc1, 0x2d, 0x66, 0x4c, 0xba, 0x05, 0x64, 0x66, 0xe5, 0x38, 0x8c, 0xcc, 0x8c, 0x97, 0xd9, 0xef,
	0x3b, 0x8c, 0x64, 0x34, 0x80, 0x76, 0x84, 0x6a, 0x28, 0xe3, 0xb1, 0x6d, 0xb3, 0x6e, 0xab, 0xca,
	0x10, 0x7d, 0x0d, 0xee, 0x58, 0x48, 0xcd, 0x47, 0x9e, 0x6b, 0x67, 0x40, 0xcb, 0x33, 0x38, 0xb7,
	0x11, 0x96, 0x67, 0xd0, 0x13, 0x68, 0xc5, 0xe9, 0x14, 0x53, 0x2d, 0x64, 0xe6, 0x35, 0x02, 0xa7,
	0xdb, 0xee, 0x1d, 0x3e, 0x34, 0xb2, 0xa3, 0x7e, 0x91, 0x75, 0x96, 0x6a, 0x99, 0xb1, 0x75, 0x55,
	0xe7, 0x03, 0xec, 0x6c, 0x06, 0x4d, 0x43, 0x37, 0x98, 0x15, 0x2d, 0xde, 0x60, 0x46, 0xf7, 0xa1,
	0x3e, 0xe5, 0xa3, 0x09, 0xe6, 0x4d, 0x2e, 0x9d, 0xf7, 0xd5, 0x77, 0x24, 0x3c, 0x00, 0xf7, 0x7c,
	0xc4, 0x33, 0x94, 0x94, 0x42, 0x2d, 0xe5, 0x49, 0x31, 0x44, 0x6b, 0x87, 0x1e, 0xb8, 0x4b, 0xc1,
	0x74, 0x07, 0xaa, 0x5a, 0xe4, 0xb1, 0xaa, 0x16, 0xe1, 0x35, 0x3c, 0x39, 0x15, 0x49, 0xc2, 0xd3,
	0x88, 0xe1, 0x10, 0xe3, 0x29, 0x46, 0x1b, 0xbb, 0x24, 0xf7, 0x76, 0xb9, 0x0f, 0x75, 0x94, 0x52,
	0x48, 0x2b, 0xa0, 0xc9, 0x96, 0x0e, 0x3d, 0x84, 0x6d, 0x6b, 0x7c, 0x2b, 0x16, 0xe8, 0x58, 0xfe,
	0x2d, 0x0b, 0xe6, 0x47, 0x17, 0xbe, 0x84, 0x46, 0x7e, 0x94, 0x46, 0xe2, 0x64, 0xb2, 0x5a, 0x9e,
	0xb5, 0x7b, 0x77, 0x04, 0xda, 0x9f, 0x78, 0x82, 0x03, 0x94, 0xd3, 0x78, 0x88, 0xf4, 0x14, 0xda,
	0x03, 0x4c, 0xa3, 0x5c, 0x1c, 0x7d, 0x56, 0x9e, 0xe6, 0xea, 0x79, 0x74, 0x5e, 0x94, 0xe1, 0x7b,
	0x8d, 0x84, 0x15, 0xda, 0x87, 0xbd, 0xdc, 0x33, 0x25, 0xb9, 0x12, 0x45, 0x1f, 0x7a, 0x29, 0x9d,
	0xe7, 0x65, 0x70, 0xe3, 0xa5, 0x84, 0x95, 0x63, 0x42, 0x4f, 0x56, 0x54, 0xe6, 0x5c, 0x1f, 0xa7,
	0x7a, 0xba, 0x01, 0x9a, 0xeb, 0x36, 0x14, 0x1f, 0xbd, 0x3f, 0x73, 0x9f, 0xdc, 0xce, 0x7d, 0x72,
	0x37, 0xf7, 0xc9, 0xcf, 0x85, 0x5f, 0xb9, 0x5d, 0xf8, 0x95, 0xbf, 0x0b, 0xbf, 0x72, 0xe9, 0xda,
	0xbf, 0xc0, 0xdb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x57, 0xcb, 0x6b, 0xb1, 0x19, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameServiceClient is the client API for GameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameServiceClient interface {
	SendCommand(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*CommandReceived, error)
	ReceiveUserMessages(ctx context.Context, in *Session, opts ...grpc.CallOption) (GameService_ReceiveUserMessagesClient, error)
	ReceiveStatMessages(ctx context.Context, in *Session, opts ...grpc.CallOption) (GameService_ReceiveStatMessagesClient, error)
}

type gameServiceClient struct {
	cc *grpc.ClientConn
}

func NewGameServiceClient(cc *grpc.ClientConn) GameServiceClient {
	return &gameServiceClient{cc}
}

func (c *gameServiceClient) SendCommand(ctx context.Context, in *UserInput, opts ...grpc.CallOption) (*CommandReceived, error) {
	out := new(CommandReceived)
	err := c.cc.Invoke(ctx, "/jasonsgame.GameService/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameServiceClient) ReceiveUserMessages(ctx context.Context, in *Session, opts ...grpc.CallOption) (GameService_ReceiveUserMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameService_serviceDesc.Streams[0], "/jasonsgame.GameService/ReceiveUserMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceReceiveUserMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_ReceiveUserMessagesClient interface {
	Recv() (*MessageToUser, error)
	grpc.ClientStream
}

type gameServiceReceiveUserMessagesClient struct {
	grpc.ClientStream
}

func (x *gameServiceReceiveUserMessagesClient) Recv() (*MessageToUser, error) {
	m := new(MessageToUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameServiceClient) ReceiveStatMessages(ctx context.Context, in *Session, opts ...grpc.CallOption) (GameService_ReceiveStatMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GameService_serviceDesc.Streams[1], "/jasonsgame.GameService/ReceiveStatMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameServiceReceiveStatMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameService_ReceiveStatMessagesClient interface {
	Recv() (*Stats, error)
	grpc.ClientStream
}

type gameServiceReceiveStatMessagesClient struct {
	grpc.ClientStream
}

func (x *gameServiceReceiveStatMessagesClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GameServiceServer is the server API for GameService service.
type GameServiceServer interface {
	SendCommand(context.Context, *UserInput) (*CommandReceived, error)
	ReceiveUserMessages(*Session, GameService_ReceiveUserMessagesServer) error
	ReceiveStatMessages(*Session, GameService_ReceiveStatMessagesServer) error
}

func RegisterGameServiceServer(s *grpc.Server, srv GameServiceServer) {
	s.RegisterService(&_GameService_serviceDesc, srv)
}

func _GameService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jasonsgame.GameService/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServiceServer).SendCommand(ctx, req.(*UserInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameService_ReceiveUserMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Session)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).ReceiveUserMessages(m, &gameServiceReceiveUserMessagesServer{stream})
}

type GameService_ReceiveUserMessagesServer interface {
	Send(*MessageToUser) error
	grpc.ServerStream
}

type gameServiceReceiveUserMessagesServer struct {
	grpc.ServerStream
}

func (x *gameServiceReceiveUserMessagesServer) Send(m *MessageToUser) error {
	return x.ServerStream.SendMsg(m)
}

func _GameService_ReceiveStatMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Session)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameServiceServer).ReceiveStatMessages(m, &gameServiceReceiveStatMessagesServer{stream})
}

type GameService_ReceiveStatMessagesServer interface {
	Send(*Stats) error
	grpc.ServerStream
}

type gameServiceReceiveStatMessagesServer struct {
	grpc.ServerStream
}

func (x *gameServiceReceiveStatMessagesServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

var _GameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jasonsgame.GameService",
	HandlerType: (*GameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommand",
			Handler:    _GameService_SendCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveUserMessages",
			Handler:       _GameService_ReceiveUserMessages_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveStatMessages",
			Handler:       _GameService_ReceiveStatMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "jasonsgame.proto",
}

func (m *UserInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInput) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Session != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.Session.Size()))
		n1, err := m.Session.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MessageToUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageToUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Location != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.Location.Size()))
		n2, err := m.Location.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.Sequence))
	}
	if m.Heartbeat {
		dAtA[i] = 0x20
		i++
		if m.Heartbeat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *Exit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Location) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Location) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Did) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Did)))
		i += copy(dAtA[i:], m.Did)
	}
	if len(m.Tip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Tip)))
		i += copy(dAtA[i:], m.Tip)
	}
	if m.X != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.X))
	}
	if m.Y != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.Y))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if m.Portal != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.Portal.Size()))
		n3, err := m.Portal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Inventory) > 0 {
		for k, _ := range m.Inventory {
			dAtA[i] = 0x3a
			i++
			v := m.Inventory[k]
			mapSize := 1 + len(k) + sovJasonsgame(uint64(len(k))) + 1 + len(v) + sovJasonsgame(uint64(len(v)))
			i = encodeVarintJasonsgame(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintJasonsgame(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintJasonsgame(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Portal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Portal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	return i, nil
}

func (m *CommandReceived) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommandReceived) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(m.Sequence))
	}
	if m.Error {
		dAtA[i] = 0x10
		i++
		if m.Error {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	return i, nil
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uuid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintJasonsgame(dAtA, i, uint64(len(m.Uuid)))
		i += copy(dAtA[i:], m.Uuid)
	}
	return i, nil
}

func encodeVarintJasonsgame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	return n
}

func (m *MessageToUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovJasonsgame(uint64(m.Sequence))
	}
	if m.Heartbeat {
		n += 2
	}
	return n
}

func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	return n
}

func (m *Exit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Location) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	l = len(m.Tip)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	if m.X != 0 {
		n += 1 + sovJasonsgame(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovJasonsgame(uint64(m.Y))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	if m.Portal != nil {
		l = m.Portal.Size()
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	if len(m.Inventory) > 0 {
		for k, v := range m.Inventory {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovJasonsgame(uint64(len(k))) + 1 + len(v) + sovJasonsgame(uint64(len(v)))
			n += mapEntrySize + 1 + sovJasonsgame(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	return n
}

func (m *Portal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	return n
}

func (m *CommandReceived) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovJasonsgame(uint64(m.Sequence))
	}
	if m.Error {
		n += 2
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	return n
}

func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovJasonsgame(uint64(l))
	}
	return n
}

func sovJasonsgame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozJasonsgame(x uint64) (n int) {
	return sovJasonsgame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageToUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageToUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageToUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Location{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heartbeat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Heartbeat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Exit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Location) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Location: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Location: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Portal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Portal == nil {
				m.Portal = &Portal{}
			}
			if err := m.Portal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inventory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Inventory == nil {
				m.Inventory = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowJasonsgame
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJasonsgame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthJasonsgame
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthJasonsgame
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowJasonsgame
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthJasonsgame
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthJasonsgame
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipJasonsgame(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthJasonsgame
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Inventory[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Portal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Portal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Portal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommandReceived) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommandReceived: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommandReceived: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Error = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJasonsgame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJasonsgame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJasonsgame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJasonsgame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJasonsgame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJasonsgame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJasonsgame
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthJasonsgame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowJasonsgame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipJasonsgame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthJasonsgame
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthJasonsgame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJasonsgame   = fmt.Errorf("proto: integer overflow")
)
